id = /\a.\x:a.x.
const = /\a./\b.\x:b.\y:a.x.
not = \x:Bool.if x then false else true.

:a true.
:a not false.
:a id[Bool] true.
:a not (id[Bool] false).

Pair := \a.\b.\/r.(a->b->r)->r.
pair = /\a./\b.\x:a.\y:b.
  (/\r.\f:(a->b->r).f x y) as Pair a b.
fst = /\a./\b.\p:Pair a b.
  p [a] (\x:a.\y:b.x).
snd = /\a./\b.\p:Pair a b.
  p [b] (\x:a.\y:b.y).

:a fst[Bool][Bool] (pair[Bool][Bool] true false).
:a (snd[Bool][Bool->Bool] (pair[Bool][Bool->Bool] false not)) false.

Maybe := \a.\/r.(a->r)->r->r.
Either := \e.\a.\/r.(e->r)->(a->r)->r.

Monad_bind := \m::*->*. \/a.\/b. m a -> (a -> m b) -> m b.
Monad_return := \m::*->*. \/a. a -> m a.

just = /\a.\x:a.
  (/\r.\f:(a->r).\d:r.f x) as Maybe a.
nothing = /\a.
  (/\r.\f:(a->r).\d:r.d) as Maybe a.

bind_maybe = /\a./\b.
  \m:Maybe a. \f:a->Maybe b.
    m[Maybe b] (\x:a.f x) (nothing[b]).
return_maybe = just.

left = /\e./\a.\x:e.
  (/\r.\fl:(e->r).\fr:(a->r).fl x) as Either e a.
right = /\e./\a.\x:a.
  (/\r.\fl:(e->r).\fr:(a->r).fr x) as Either e a.

bind_either = /\e. /\a./\b.
  \m:Either e a. \f:a->Either e b.
    m[Either e b] (\lt:e.left[e][b] lt) (\rt:a. f rt).
return_either = right.

:a (just[Bool] false)[Bool] not false.
:a (nothing[Bool])[Bool] (id[Bool]) true.

:a (left[Bool][Unit] false)[Bool] (not) (const[Unit][Bool] false).
:a (right[Unit][Unit] unit)[Bool]
  (const[Unit][Bool] false)
  (const[Unit][Bool] true).

rcd1 = {x=true,y=not}.
:a rcd1#x.
:a rcd1#y false.

and = \x:Bool.\y:Bool. if x then y else false.
or = \x:Bool.\y:Bool. if x then true else y.

Monoid := \m.
  { mempty = m
  , mappend = m->m->m
  }.

Monoid_Bool_and =
  { mempty = true
  , mappend = and
  } as Monoid Bool.

Monoid_Bool_or =
  { mempty = false
  , mappend = or
  } as Monoid Bool.

mdouble = /\m.\monoid:Monoid m.
  \x:m. monoid#mappend x x.

Option := \a.<none=Unit,some=a>.
none = /\a.<none=unit> as Option a.
some = /\a.\x:a.<some=x> as Option a.
is_some = /\a.\opt:Option a.
  case opt of
    <none=_>. false,
    <some=_>. true.

Result := \e.\a.<ok=a,err=e>.
ok = /\e./\a.\x:a.<ok=x> as Result e a.
err = /\e./\a.\y:e.<err=y> as Result e a.

map_option = /\a./\b. \f:a->b. \opt:Option a.
  case opt of
    <some=x>. some[b] (f x),
    <none=_>. none[b].

:a case <x=true> of <x=a>. a.
:a case <a=true> as <a=Bool,b=Unit> of
  <a=a>. a,
  <b=_>. false.
:a is_some[Bool] (some[Bool] false).
:a not (is_some[Unit] (none[Unit])).

value <- not true.
nvalue <- not value.
:a nvalue.
:a not value.

fun1 <- \x:Bool. not x.
fun2 <- \x:Bool. not (fun1 x).
:a fun2 true.

:a let x=true in x.
:a let x=not true in if x then false else true.

:a (\x:Int.true) 10.

:a ieq 10 10.
:a not (ieq 2 1).
:a ieq (iadd 2 3) 5.
:a ieq (isub 30 2) 28.
:a ieq (imul 3 4) 12.
:a ieq (idiv 12 3) 4.
:a ieq (imod 14 3) 2.

:a feq 2.0 2.0.
:a not (feq 1.0 0.5).
:a feq (fadd 1.0 0.5) 1.5.
:a feq (fsub 7.5 3.25) 4.25.
:a feq (fmul 0.5 1.2) 0.6.
:a feq (fdiv 4.5 1.5) 3.0.
