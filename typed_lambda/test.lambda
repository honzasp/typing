not = \x:Bool. if x then false else true;
and = \x:Bool.\y:Bool. if x then y else false;
or = \x:Bool.\y:Bool. if x then true else y;
xor = \x:Bool.\y:Bool. if x then not y else y;

n0 = 0;
n1 = succ n0;
n2 = succ n1;
n3 = succ n2;
n4 = succ n3;
n5 = succ n4;
n6 = succ n5;
n7 = succ n6;
n8 = succ n7;
n9 = succ n8;

:a true;
:a not false;
:a not (not true);

:a and true true;
:a not (and true false);
:a not (and false true);
:a not (and false false);

:a or true true;
:a or true false;
:a or false true;
:a not (or false false);

:a not (xor true true);
:a xor true false;
:a xor false true;
:a not (xor false false);

:a iszero n0;
:a not (iszero n1);

(\x:Unit.x) unit;
t1 = (\x:Unit.x) unit;
t2 = (\f:Unit->Unit. f(f(unit))) (\x:Unit. t1);
t3 = (\f:Unit->Unit. f(f(unit))) (\x:Unit. t2);
t4 = (\f:Unit->Unit. f(f(unit))) (\x:Unit. t3);
t5 = (\f:Unit->Unit. f(f(unit))) (\x:Unit. t4);
t6 = (\f:Unit->Unit. f(f(unit))) (\x:Unit. t5);
t7 = (\f:Unit->Unit. f(f(unit))) (\x:Unit. t6);
t8 = (\f:Unit->Unit. f(f(unit))) (\x:Unit. t7);
t9 = (\f:Unit->Unit. f(f(unit))) (\x:Unit. t8);

:a let x=true in x;
:a (\x:Bool.let y=not x in not y) true;
:a let x=true in let y=not x in not y;

:a {0,true}.2;
:a {succ 0,false,\x:Bool.not x}.3 false;

:a iszero 0;
:a iszero (pred 1);
:a iszero (pred (pred (pred 3)));

equal = fix \equal:Nat->Nat->Bool.
  \a:Nat.\b:Nat. 
    if iszero a then iszero b 
    else if iszero b then false
    else equal (pred a) (pred b);

plus = fix \plus:Nat->Nat->Nat.
  \a:Nat.\b:Nat. if iszero a then b else succ (plus (pred a) b);
times = fix \times:Nat->Nat->Nat.
  \a:Nat.\b:Nat. if iszero a then 0 else plus b (times (pred a) b);
factorial = fix \factorial:Nat->Nat.
  \n:Nat. if iszero n then 1 else times n (factorial (pred n));

:a equal 4 4;
:a not (equal 5 3);

:a equal (plus 3 4) 7;
:a equal (plus 10 2) 12;

:a equal (times 5 7) 35;
:a equal (times 9 2) 18;

:a equal (factorial 5) 120;

mod = \a:Nat.\b:Nat.
  let go = (fix \go:Nat->Nat->Nat->Nat.
    \i:Nat.\m:Nat.\n:Nat.
      if iszero i then m
      else if iszero n then go (pred i) 0 (pred b)
      else go (pred i) (succ m) (pred n))
  in go a 0 (pred b);
